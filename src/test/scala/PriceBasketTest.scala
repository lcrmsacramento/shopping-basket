import org.scalatest.funsuite.AnyFunSuite
import scala.sys.process._
import java.io._
import scala.Console
import utils.Constants.APPLES_DISCOUNT_DESCRIPTION
import utils.Constants.APPLES
import utils.Constants.BREAD_DISCOUNT_DESCRIPTION
import utils.Constants.SOUP
import utils.Constants.MILK
import utils.Constants.BREAD
import utils.Constants.NO_OFFERS_AVAILABLE

class PriceBasketTest extends AnyFunSuite {

  /** run the ShoppingBasket application with the given arguments
    *
    * @param args
    *   a set of strings representing the items
    * @return
    *   the receipt generated by the application
    */
  def runShoppingBasket(args: String*): String = {
    val output = new ByteArrayOutputStream()
    scala.Console.withOut(output) {
      PriceBasket.main(args.toArray)
    }
    output.toString()
  }

  test("Apply apple discount") {
    val output = runShoppingBasket(APPLES, APPLES)
    assert(output.contains("Subtotal: £2.0"))
    assert(output.contains(f"$APPLES_DISCOUNT_DESCRIPTION: 20p"))
    assert(output.contains("Total price: £1.80"))
  }

  test("Apply bread discount") {
    val output = runShoppingBasket(SOUP, SOUP, BREAD)
    assert(output.contains("Subtotal: £2.10"))
    assert(output.contains(f"$BREAD_DISCOUNT_DESCRIPTION: 40p"))
    assert(output.contains("Total price: £1.70"))
  }

  test("Apply both discounts") {
    val output = runShoppingBasket(APPLES, APPLES, SOUP, SOUP, BREAD)
    assert(output.contains("Subtotal: £4.10"))
    assert(output.contains(f"$APPLES_DISCOUNT_DESCRIPTION: 20p"))
    assert(output.contains(f"$BREAD_DISCOUNT_DESCRIPTION: 40p"))
    assert(output.contains("Total price: £3.50"))
  }

  test("Test three different items") {
    val output = runShoppingBasket(APPLES, BREAD, MILK)
    assert(output.contains("Subtotal: £3.10"))
    assert(output.contains(s"$APPLES_DISCOUNT_DESCRIPTION: 10p"))
    assert(output.contains("Total price: £3.00"))
  }

  test("Apply no discounts") {
    val output = runShoppingBasket(MILK, MILK)
    println(output)
    assert(output.contains("Subtotal: £2.60"))
    assert(output.contains(NO_OFFERS_AVAILABLE))
    assert(output.contains("Total price: £2.60"))
  }

  test("Insert unknown item") {
    val output = runShoppingBasket("Peach")
    assert(output.contains("Subtotal: £0.00"))
    assert(output.contains(NO_OFFERS_AVAILABLE))
    assert(output.contains("Total price: £0.00"))
  }

  test("Insert unknown item with other items") {
    val output = runShoppingBasket(APPLES, "Peach", BREAD)
    assert(output.contains("Subtotal: £1.80"))
    assert(output.contains(s"$APPLES_DISCOUNT_DESCRIPTION: 10p"))
    assert(output.contains("Total price: £1.7"))
  }

}
